use proc_macro::TokenStream;
use quote::quote;
use syn::{
    braced,
    parse::{Parse, ParseStream},
    parse_macro_input,
    punctuated::Punctuated,
    token, Field, Ident, Result, Token, Type,
};

struct ManagerOfThingInfo {
    manager_ident: Ident,
    manager_generics_ident: Ident,
    thing_type: Type,
}

/// [Parse docs](https://docs.rs/syn/latest/syn/parse/index.html)
impl Parse for ManagerOfThingInfo {
    fn parse(input: ParseStream) -> Result<Self> {
        let manager_ident: Ident = input.parse()?;
        if input.peek(Token![<]) {
            input.parse::<Token![<]>()?;
        }
        let manager_generics_ident: Ident = input.parse()?;
        if input.peek(Token![>]) {
            input.parse::<Token![>]>()?;
        }
        input.parse::<Token![for]>()?;
        let thing_type: Type = input.parse()?;
        Ok(ManagerOfThingInfo {
            manager_ident,
            manager_generics_ident,
            thing_type,
        })
    }
}

#[proc_macro]
pub fn fn_macro_custom_syntax(input: TokenStream) -> TokenStream {
    let val: ManagerOfThingInfo = parse_macro_input!(input);
    // quote!(
    //     struct H {}
    // )
    // .into()
}

enum Item {
    Struct(ItemStruct),
    Enum(ItemEnum),
}

struct ItemStruct {
    struct_token: Token![struct],
    ident: Ident,
    brace_token: token::Brace,
    fields: Punctuated<Field, Token![,]>,
}

impl Parse for Item {
    fn parse(input: ParseStream) -> Result<Self> {
        let lookahead = input.lookahead1();
        if lookahead.peek(Token![struct]) {
            input.parse().map(Item::Struct)
        } else if lookahead.peek(Token![enum]) {
            input.parse().map(Item::Enum)
        } else {
            Err(lookahead.error())
        }
    }
}

impl Parse for ItemStruct {
    fn parse(input: ParseStream) -> Result<Self> {
        let content;
        Ok(ItemStruct {
            struct_token: input.parse()?,
            ident: input.parse()?,
            brace_token: braced!(content in input),
            fields: content.parse_terminated(Field::parse_named)?,
        })
    }
}
